{
  name: '/',
  server: Server {
    nsps: { '/': [Circular] },
    parentNsps: Map {},
    _path: '/socket.io',
    _serveClient: true,
    parser: {
      protocol: 4,
      types: [Array],
      CONNECT: 0,
      DISCONNECT: 1,
      EVENT: 2,
      ACK: 3,
      ERROR: 4,
      BINARY_EVENT: 5,
      BINARY_ACK: 6,
      Encoder: [Function: Encoder],
      Decoder: [Function: Decoder]
    },
    encoder: Encoder {},
    _adapter: [Function: Adapter],
    _origins: '*:*',
    sockets: [Circular],
    eio: Server {
      clients: [Object],
      clientsCount: 2,
      wsEngine: 'ws',
      pingTimeout: 5000,
      pingInterval: 25000,
      upgradeTimeout: 10000,
      maxHttpBufferSize: 100000000,
      transports: [Array],
      allowUpgrades: true,
      allowRequest: [Function: bound ],
      cookie: 'io',
      cookiePath: '/',
      cookieHttpOnly: true,
      perMessageDeflate: false,
      httpCompression: [Object],
      initialPacket: [Array],
      ws: [WebSocketServer],
      _events: [Object: null prototype],
      _eventsCount: 1
    },
    httpServer: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 5,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 40000,
      _connectionKey: '6::::3000',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 4
    },
    engine: Server {
      clients: [Object],
      clientsCount: 2,
      wsEngine: 'ws',
      pingTimeout: 5000,
      pingInterval: 25000,
      upgradeTimeout: 10000,
      maxHttpBufferSize: 100000000,
      transports: [Array],
      allowUpgrades: true,
      allowRequest: [Function: bound ],
      cookie: 'io',
      cookiePath: '/',
      cookieHttpOnly: true,
      perMessageDeflate: false,
      httpCompression: [Object],
      initialPacket: [Array],
      ws: [WebSocketServer],
      _events: [Object: null prototype],
      _eventsCount: 1
    }
  },
  sockets: {
    gDhlmuB7b4DmhHvkAAAA: Socket {
      nsp: [Circular],
      server: [Server],
      adapter: [Adapter],
      id: 'gDhlmuB7b4DmhHvkAAAA',
      client: [Client],
      conn: [Socket],
      rooms: [Object],
      acks: {},
      connected: true,
      disconnected: false,
      handshake: [Object],
      fns: [],
      flags: {},
      _rooms: [],
      _events: [Object: null prototype],
      _eventsCount: 5
    },
    ZaUwk67PAYQBrvodAAAC: Socket {
      nsp: [Circular],
      server: [Server],
      adapter: [Adapter],
      id: 'ZaUwk67PAYQBrvodAAAC',
      client: [Client],
      conn: [Socket],
      rooms: [Object],
      acks: {},
      connected: true,
      disconnected: false,
      handshake: [Object],
      fns: [],
      flags: {},
      _rooms: [],
      _events: [Object: null prototype],
      _eventsCount: 5
    }
  },
  connected: {
    gDhlmuB7b4DmhHvkAAAA: Socket {
      nsp: [Circular],
      server: [Server],
      adapter: [Adapter],
      id: 'gDhlmuB7b4DmhHvkAAAA',
      client: [Client],
      conn: [Socket],
      rooms: [Object],
      acks: {},
      connected: true,
      disconnected: false,
      handshake: [Object],
      fns: [],
      flags: {},
      _rooms: [],
      _events: [Object: null prototype],
      _eventsCount: 5
    },
    ZaUwk67PAYQBrvodAAAC: Socket {
      nsp: [Circular],
      server: [Server],
      adapter: [Adapter],
      id: 'ZaUwk67PAYQBrvodAAAC',
      client: [Client],
      conn: [Socket],
      rooms: [Object],
      acks: {},
      connected: true,
      disconnected: false,
      handshake: [Object],
      fns: [],
      flags: {},
      _rooms: [],
      _events: [Object: null prototype],
      _eventsCount: 5
    }
  },
  fns: [],
  ids: 0,
  rooms: [],
  flags: {},
  adapter: Adapter {
    nsp: [Circular],
    rooms: { gDhlmuB7b4DmhHvkAAAA: [Room], ZaUwk67PAYQBrvodAAAC: [Room] },
    sids: { gDhlmuB7b4DmhHvkAAAA: [Object], ZaUwk67PAYQBrvodAAAC: [Object] },
    encoder: Encoder {}
  },
  _events: [Object: null prototype] { connect: [Function] },
  _eventsCount: 1
}